# backup.tf
resource "aws_backup_vault" "main" {
  name = "idiomas-backup-vault"
  kms_key_arn = aws_kms_key.backup.arn
}

resource "aws_backup_plan" "main" {
  name = "idiomas-backup-plan"

  rule {
    rule_name         = "daily_backup"
    target_vault_name = aws_backup_vault.main.name
    schedule          = "cron(0 1 * * ? *)"
    
    lifecycle {
      delete_after = 30
    }
  }

  rule {
    rule_name         = "weekly_backup"
    target_vault_name = aws_backup_vault.main.name
    schedule          = "cron(0 1 ? * SUN *)"
    
    lifecycle {
      delete_after = 90
    }
  }
}

# Disaster Recovery Configuration
resource "aws_dynamodb_table" "state_lock" {
  name           = "terraform-state-lock"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "LockID"
  
  attribute {
    name = "LockID"
    type = "S"
  }

  point_in_time_recovery {
    enabled = true
  }
}

resource "aws_s3_bucket" "dr_bucket" {
  bucket = "idiomas-dr-${data.aws_caller_identity.current.account_id}"
  
  versioning {
    enabled = true
  }

  replication_configuration {
    role = aws_iam_role.replication.arn

    rules {
      id     = "dr_replication"
      status = "Enabled"

      destination {
        bucket        = aws_s3_bucket.dr_secondary.arn
        storage_class = "STANDARD_IA"
      }
    }
  }
}

# Route53 Failover
resource "aws_route53_health_check" "primary" {
  fqdn              = aws_lb.primary.dns_name
  port              = 80
  type              = "HTTP"
  resource_path     = "/health"
  failure_threshold = "3"
  request_interval  = "30"
}

resource "aws_route53_record" "primary" {
  zone_id = aws_route53_zone.main.zone_id
  name    = var.domain_name
  type    = "A"

  failover_routing_policy {
    type = "PRIMARY"
  }

  set_identifier = "primary"
  health_check_id = aws_route53_health_check.primary.id

  alias {
    name                   = aws_lb.primary.dns_name
    zone_id                = aws_lb.primary.zone_id
    evaluate_target_health = true
  }
}

resource "aws_route53_record" "secondary" {
  zone_id = aws_route53_zone.main.zone_id
  name    = var.domain_name
  type    = "A"

  failover_routing_policy {
    type = "SECONDARY"
  }

  set_identifier = "secondary"

  alias {
    name                   = aws_lb.secondary.dns_name
    zone_id                = aws_lb.secondary.zone_id
    evaluate_target_health = true
  }
}

# RDS Cross-Region Read Replica
resource "aws_db_instance" "replica" {
  instance_class         = "db.t3.medium"
  identifier            = "idiomas-db-replica"
  replicate_source_db   = aws_db_instance.postgres.arn
  provider              = aws.secondary_region
  
  auto_minor_version_upgrade = true
  backup_retention_period    = 7
  multi_az                  = true
}

# DynamoDB Global Tables
resource "aws_dynamodb_global_table" "sessions" {
  provider = aws.primary

  name = "idiomas-sessions"

  replica {
    region_name = var.aws_region
  }

  replica {
    region_name = var.secondary_region
  }
}

# KMS Key for Backups
resource "aws_kms_key" "backup" {
  description             = "KMS key for AWS Backup encryption"
  deletion_window_in_days = 7
  enable_key_rotation     = true
}

# Lambda for DR Testing
resource "aws_lambda_function" "dr_test" {
  filename         = "dr_test.zip"
  function_name    = "idiomas-dr-test"
  role            = aws_iam_role.lambda_dr.arn
  handler         = "index.handler"
  runtime         = "nodejs18.x"
  
  environment {
    variables = {
      PRIMARY_REGION   = var.aws_region
      SECONDARY_REGION = var.secondary_region
    }
  }
}
